name: Automated-Jest

on:
  pull_request:
    branches:
      - 'develop'

jobs:
  jest_runner:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create Testing Environment File
        run:  |
          pwd
            cd /home/runner/work/cupicks-be/cupicks-be
            touch .env.test
            echo PORT=${{secrets.TEST_PORT}} >> .env.test
            echo SALT=${{secrets.TEST_SALT}} >> .env.test
            echo CORS_URL_ONE_WITHOUT_PORT=${{secrets.TEST_CORS_URL_ONE_WITHOUT_PORT}} >> .env.test
            echo CORS_URL_TWO_WITHOUT_PORT=${{secrets.TEST_CORS_URL_TWO_WITHOUT_PORT}} >> .env.test
            echo CORS_URL_THREE_WITHOUT_PORT=${{secrets.TEST_CORS_URL_THREE_WITHOUT_PORT}} >> .env.test
            echo CORS_URL_FOUR_WITHOUT_PORT=${{secrets.TEST_CORS_URL_FOUR_WITHOUT_PORT}} >> .env.test
            echo FROTN_REDIRECT_URL_WITHOUT_PORT=${{secrets.TEST_FROTN_REDIRECT_URL_WITHOUT_PORT}} >> .env.test
            echo SERVER_URL_WITH_PORT=${{secrets.TEST_SERVER_URL_WITH_PORT}} >> .env.test
            echo JWT_ACCESS_EXPIRED_IN=${{secrets.TEST_JWT_ACCESS_EXPIRED_IN}} >> .env.test
            echo JWT_REFRESH_EXPIRED_IN=${{secrets.TEST_JWT_REFRESH_EXPIRED_IN}} >> .env.test
            echo JWT_VERIFY_EXPIRED_IN=${{secrets.TEST_JWT_VERIFY_EXPIRED_IN}} >> .env.test
            echo JWT_RESET_EXPIRED_IN=${{secrets.TEST_JWT_RESET_EXPIRED_IN}} >> .env.test
            echo JWT_HASH_ALGOIRHTM=${{secrets.TEST_JWT_HASH_ALGOIRHTM}} >> .env.test
            echo HASH_PASSPHRASE=${{secrets.TEST_HASH_PASSPHRASE}} >> .env.test
            echo MYSQL_HOST=${{secrets.TEST_MYSQL_HOST}} >> .env.test
            echo MYSQL_USER=${{secrets.TEST_MYSQL_USER}} >> .env.test
            echo MYSQL_DATABASE=${{secrets.TEST_MYSQL_DATABASE}} >> .env.test
            echo MYSQL_PASSWORD=${{secrets.TEST_MYSQL_PASSWORD}} >> .env.test
            echo MYSQL_CONNECTION_LIMIT=${{secrets.TEST_MYSQL_CONNECTION_LIMIT}} >> .env.test
            echo S3_ACCESS_KEY=${{secrets.TEST_S3_ACCESS_KEY}} >> .env.test
            echo S3_SECRET_KEY=${{secrets.TEST_S3_SECRET_KEY}} >> .env.test
            echo BUCKET=${{secrets.TEST_BUCKET}} >> .env.test
            echo REGION=${{secrets.TEST_REGION}} >> .env.test
            echo SES_API_VERSION=${{secrets.TEST_SES_API_VERSION}} >> .env.test
            echo SES_API_REGION=${{secrets.TEST_SES_API_REGION}} >> .env.test
            echo SES_ACCESS_KEY=${{secrets.TEST_SES_ACCESS_KEY}} >> .env.test
            echo SES_SECRET_KEY=${{secrets.TEST_SES_SECRET_KEY}} >> .env.test
            echo SES_SENDER_EMAIL=${{secrets.TEST_SES_SENDER_EMAIL}} >> .env.test
      
      - name: Create Testing Jwt Private Key using local key
        run:  |
          pwd
            cd /home/runner/work/cupicks-be/cupicks-be
            touch private.pem
            echo `${{secrets.TEST_JWT_PRIVATE_PEM}}` >> private.pem
      
      - name: Create Testing Jwt Public Key using local key
        run:  |
          pwd
            cd /home/runner/work/cupicks-be/cupicks-be
            touch public.pem
            echo `${{secrets.TEST_JWT_PUBLIC_PEM}}` >> public.pem

      - name: Cachce node_modules
        uses: actions/cache@v2
        id: node-cache
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install node_modules
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run jest
        run: npm test
        
      - name: IF Failure and Close PR
        if: failure()
        uses: actions/github-script@0.2.0
        with:
          github-token: ${{github.token}}
          script: | 
            const ref = "${{github.ref}}"
            const pull_number = Number(ref.split("/")[2])
            await github.pulls.createReview({
              ...context.repo,
              pull_number,
              body:"테스트 코드 실행 간에 에러가 발생하였습니다.\n테스트 코드를 확인 후 수정해주세요.",
              event: "REQUEST_CHANGES"
            })
            await github.pulls.update({
              ...context.repo,
              pull_number,
              state: "closed"
            }) 
